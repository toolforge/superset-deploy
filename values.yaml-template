service:
  type: NodePort
  nodePort:
    http: 30665
bootstrapScript: |
  #!/bin/bash
  pip install authlib


configOverrides:
  enable_oauth: |
    admin_users = [
        "VRook (WMF)",
    ]
    from flask_appbuilder.security.manager import AUTH_OAUTH
    
    # make http https for request_uri
    ENABLE_PROXY_FIX = True

    # Set the authentication type to OAuth
    AUTH_TYPE = AUTH_OAUTH
    
    OAUTH_PROVIDERS = [
        {
            'name':'mediawiki',
            'icon':'fa-wikipedia-w',
            'token_key':'access_token',
            'remote_app': {
                # auth only callback mediawiki gives email and realname
                'client_id':'0c0ca9df92d6da2683a84dc2efc72640',
                'client_secret':'${OAUTH_SECRET}',
                'client_kwargs':{
                    'scope': 'mwoauth-authonlyprivate'
                },
                'api_base_url':'https://meta.wikimedia.org/w/rest.php',
                'access_token_url':'https://meta.wikimedia.org/w/rest.php/oauth2/access_token',
                'authorize_url':'https://meta.wikimedia.org/w/rest.php/oauth2/authorize',
            },
        },
    ]
    
    # Custom callback to fetch user information following OAuth2 handshake
    import logging
    from superset.security import SupersetSecurityManager

    class MediaWikiSsoSecurityManager(SupersetSecurityManager):
        def oauth_user_info(self, provider, response=None):
            """Retrieve OAuth user information from MediaWiki."""
            logging.debug("OAuth2 provider: %s", provider)
            remote = self.appbuilder.sm.oauth_remotes[provider]
            me = remote.get("/w/rest.php/oauth2/resource/profile").json()
            logging.debug("Wikimedia user info: %r", me)
            if me.get("username") in admin_users:
                logging.debug("admin user")
                return {
                    "role_keys": ["ADMINS"],
                    "username": me.get("username"),
                    "first_name": me.get("username"),
                }
            else:
                return {
                    "role_keys": ["USERS"],
                    "username": me.get("username"),
                    "first_name": me.get("username"),
                }

    AUTH_ROLES_MAPPING = {
        "ADMINS": ["Admin"],
        "USERS": ["Alpha","sql_lab","OAuth"],
    }

    CUSTOM_SECURITY_MANAGER = MediaWikiSsoSecurityManager

    # Will allow user self registration, allowing to create Flask users from
    # Authorized User
    AUTH_USER_REGISTRATION = True

    SQLALCHEMY_DATABASE_URI = 'mysql://superset:${DB_PASS}@2xopzht2475.svc.trove.eqiad1.wikimedia.cloud/superset'
